#!/bin/bash

# Dynamic Theme Switcher for Wallpaper Categories
# Automatically switches GTK themes, icons, and cursors based on wallpaper type

# Configuration file for theme mappings
THEME_CONFIG="$HOME/.config/dynamic-themes.conf"

# Theme mappings - Updated for unified Material You theming with adw-gtk3 from adw-gtk-theme package
declare -A THEMES=(
    # All wallpapers use adw-gtk3 with Material You colors from matugen
    # Icons and cursors still vary by category for variety
    
    # Space wallpapers - Dark, sleek, futuristic themes
    ["space_gtk"]="adw-gtk3"
    ["space_icons"]="Papirus-Dark"
    ["space_cursor"]="Bibata-Modern-Ice"
    
    # Nature wallpapers - Organic, natural themes  
    ["nature_gtk"]="adw-gtk3"
    ["nature_icons"]="Tela-circle-green"
    ["nature_cursor"]="Bibata-Modern-Amber"
    
    # Gaming wallpapers - High contrast, RGB themes
    ["gaming_gtk"]="adw-gtk3"
    ["gaming_icons"]="Papirus"
    ["gaming_cursor"]="Bibata-Modern-Classic"
    
    # Minimal wallpapers - Clean, simple themes
    ["minimal_gtk"]="adw-gtk3"
    ["minimal_icons"]="Papirus"
    ["minimal_cursor"]="Capitaine-Cursors"
    
    # Dark wallpapers - Pure dark themes
    ["dark_gtk"]="adw-gtk3"
    ["dark_icons"]="Papirus-Dark"
    ["dark_cursor"]="Bibata-Modern-Classic"
    
    # Abstract wallpapers - Colorful, artistic themes
    ["abstract_gtk"]="adw-gtk3"
    ["abstract_icons"]="Papirus"
    ["abstract_cursor"]="Bibata-Modern-Amber"
)

# Function to detect wallpaper category from path
detect_category() {
    local wallpaper_path="$1"
    
    if [[ "$wallpaper_path" =~ space ]]; then
        echo "space"
    elif [[ "$wallpaper_path" =~ nature ]]; then
        echo "nature"
    elif [[ "$wallpaper_path" =~ gaming ]]; then
        echo "gaming"
    elif [[ "$wallpaper_path" =~ minimal ]]; then
        echo "minimal"
    elif [[ "$wallpaper_path" =~ dark ]]; then
        echo "dark"
    elif [[ "$wallpaper_path" =~ abstract ]]; then
        echo "abstract"
    else
        echo "minimal"  # Default fallback
    fi
}

# Function to apply theme based on category
apply_theme() {
    local category="$1"
    local wallpaper_path="$2"
    local gtk_theme="${THEMES[${category}_gtk]}"
    local icon_theme="${THEMES[${category}_icons]}"
    local cursor_theme="${THEMES[${category}_cursor]}"
    
    echo "üé® Applying $category theme configuration..."
    echo "   GTK: $gtk_theme"
    echo "   Icons: $icon_theme" 
    echo "   Cursor: $cursor_theme"
    
    # Apply GTK theme using nwg-look (best for Hyprland/Wayland)
    if command -v nwg-look >/dev/null 2>&1; then
        # Set themes via gsettings first
        if command -v gsettings >/dev/null 2>&1; then
            gsettings set org.gnome.desktop.interface gtk-theme "$gtk_theme"
            gsettings set org.gnome.desktop.wm.preferences theme "$gtk_theme"
            gsettings set org.gnome.desktop.interface icon-theme "$icon_theme"
            gsettings set org.gnome.desktop.interface cursor-theme "$cursor_theme"
            gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark' 2>/dev/null || true
            echo "‚úÖ Theme settings applied via gsettings!"
        fi
        
        # Use nwg-look to export and apply configurations properly for Wayland
        echo "üé® Applying themes via nwg-look for Hyprland compatibility..."
        nwg-look -x >/dev/null 2>&1  # Export current settings to config files
        nwg-look -a >/dev/null 2>&1  # Apply settings
        echo "‚úÖ GTK themes applied via nwg-look!"
        
    elif command -v gsettings >/dev/null 2>&1; then
        # Fallback to gsettings only if nwg-look not available
        gsettings set org.gnome.desktop.interface gtk-theme "$gtk_theme"
        gsettings set org.gnome.desktop.wm.preferences theme "$gtk_theme"
        gsettings set org.gnome.desktop.interface icon-theme "$icon_theme"
        gsettings set org.gnome.desktop.interface cursor-theme "$cursor_theme"
        gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark' 2>/dev/null || true
        echo "‚úÖ Theme packages applied via gsettings (fallback)!"
    else
        echo "‚ùå Neither nwg-look nor gsettings found, cannot apply themes"
        return 1
    fi
    
    # Update cursor theme for Hyprland/Wayland applications
    echo "üñ±Ô∏è  Updating cursor theme for Wayland applications..."
    local dotfiles_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
    
    # Generate cursor environment file with hyprcursor support
    local cursor_env_file="$HOME/.config/hypr/cursor-theme.conf"
    cat > "$cursor_env_file" << EOF
# Dynamic cursor environment variables
# Generated by dynamic theme switcher - do not edit manually

env = HYPRCURSOR_THEME,$cursor_theme
env = HYPRCURSOR_SIZE,24

# Fallback for apps that don't support hyprcursor (GTK, etc.)
env = XCURSOR_THEME,$cursor_theme
env = XCURSOR_SIZE,24
EOF
    
    # Set cursor theme in current session
    export XCURSOR_THEME="$cursor_theme"
    export XCURSOR_SIZE=24
    
    # The window manager (Hyprland/Niri) and other applications are reloaded
    # by the `reload_apps.sh` script, which is called by `wallpaper_manager.sh`.
    # No direct WM reload needed here.
    
    # Generate Material You colors with matugen for fuzzel, waybar, kitty, etc.
    if [[ -n "$wallpaper_path" ]]; then
        echo "üåà Generating Material You colors..."
        if command -v matugen >/dev/null 2>&1; then
            local dotfiles_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
                if [[ -f "$dotfiles_dir/config/themes/matugen/config.toml" ]]; then
        matugen image --config "$dotfiles_dir/config/themes/matugen/config.toml" "$wallpaper_path" || echo "‚ö†Ô∏è  Failed to generate colors with matugen"
                echo "‚úÖ Material You colors generated!"
            else
                echo "‚ö†Ô∏è  Matugen config not found, using default settings"
                matugen image "$wallpaper_path" || echo "‚ö†Ô∏è  Failed to generate colors with matugen"
            fi
        else
            echo "‚ö†Ô∏è  Matugen not found, skipping color generation"
        fi
        
        # Starship theming is handled by matugen templates
        # No separate starship updater needed
    fi
}

# Function to install themes if missing (using cache manager)
install_missing_themes() {
    echo "üîç Checking for missing themes..."
    
    local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    local cache_manager="$script_dir/theme_cache_manager.sh"
    
    if [[ ! -f "$cache_manager" ]]; then
        echo "‚ùå Theme cache manager not found: $cache_manager"
        return 1
    fi
    
    # Make cache manager executable
    chmod +x "$cache_manager"
    
    # Check and install missing themes using cache manager
    for theme_type in gtk icons cursor; do
        for category in space nature gaming minimal dark abstract; do
            local theme_name="${THEMES[${category}_${theme_type}]}"
            if ! check_theme_installed "$theme_name" "$theme_type"; then
                echo "üì¶ Installing missing $theme_type theme: $theme_name"
                bash "$cache_manager" install "$theme_name" || echo "‚ö†Ô∏è  Failed to install $theme_name"
            fi
        done
    done
}

# Function to check if theme is installed
check_theme_installed() {
    local theme_name="$1"
    local theme_type="$2"
    
    case "$theme_type" in
        "gtk")
            [[ -d "$HOME/.themes/$theme_name" ]] || [[ -d "/usr/share/themes/$theme_name" ]]
            ;;
        "icons")
            [[ -d "$HOME/.icons/$theme_name" ]] || [[ -d "/usr/share/icons/$theme_name" ]]
            ;;
        "cursor")
            [[ -d "$HOME/.icons/$theme_name" ]] || [[ -d "/usr/share/icons/$theme_name" ]]
            ;;
    esac
}

# Function to create theme configuration file
create_config() {
    cat > "$THEME_CONFIG" << EOF
# Dynamic Theme Configuration
# Edit these mappings to customize themes for each wallpaper category

[space]
gtk=Arc-Dark
icons=Papirus-Dark
cursor=Bibata-Modern-Ice

[nature]
gtk=Everforest-Dark
icons=Tela-circle-green
cursor=Bibata-Modern-Amber

[gaming]
gtk=Arc-Dark
icons=Papirus
cursor=Bibata-Modern-Classic

[minimal]
gtk=adw-gtk3
icons=Papirus
cursor=Capitaine-Cursors

[dark]
gtk=Arc-Dark
icons=Papirus-Dark
cursor=Bibata-Modern-Classic

[abstract]
gtk=Arc
icons=Papirus
cursor=Bibata-Modern-Amber
EOF
    echo "üìù Created theme configuration at $THEME_CONFIG"
}

# Main function
main() {
    case "$1" in
        "install")
            echo "üöÄ Installing dynamic theme system..."
            create_config
            install_missing_themes
            echo "‚úÖ Dynamic theme system installed!"
            ;;
        "apply")
            if [[ -z "$2" ]]; then
                echo "Usage: $0 apply <wallpaper_path>"
                exit 1
            fi
            
            local wallpaper_path="$2"
            local category=$(detect_category "$wallpaper_path")
            
            echo "üñºÔ∏è  Wallpaper: $wallpaper_path"
            echo "üìÇ Category: $category"
            
            apply_theme "$category" "$wallpaper_path"
            ;;
        "list")
            echo "üìã Available theme categories:"
            for category in space nature gaming minimal dark abstract; do
                echo "  $category:"
                echo "    GTK: ${THEMES[${category}_gtk]}"
                echo "    Icons: ${THEMES[${category}_icons]}"
                echo "    Cursor: ${THEMES[${category}_cursor]}"
                echo
            done
            ;;
        "config")
            create_config
            echo "Edit $THEME_CONFIG to customize theme mappings"
            ;;
        *)
            echo "Dynamic Theme Switcher"
            echo "Usage: $0 {install|apply|list|config}"
            echo
            echo "Commands:"
            echo "  install           - Install all required themes"
            echo "  apply <wallpaper> - Apply theme based on wallpaper path"
            echo "  list              - Show all theme mappings"
            echo "  config            - Create/recreate configuration file"
            ;;
    esac
}

main "$@" 